/*
 * Copyright 2024 Lightbend Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kalix.javasdk.action;

import io.opentelemetry.api.trace.Tracer;
import kalix.javasdk.Context;

import java.util.Optional;

/**
 * Creation context for {@link Action} components.
 *
 * <p>This may be accepted as an argument to the constructor of an Action.
 */
public interface ActionCreationContext extends Context {
  /**
   * Get an Akka gRPC client for the given service name. The same client instance is shared across
   * components in the application. The lifecycle of the client is managed by the SDK and it should
   * not be stopped by user code.
   *
   * @param <T> The "service" interface generated for the service by Akka gRPC
   * @param clientClass The class of a gRPC service generated by Akka gRPC
   * @param service The name of the service to connect to, either a name of another Kalix service or
   *     an external service where connection details are configured under
   *     `akka.grpc.client.[service-name]` in `application.conf`.
   */
  <T> T getGrpcClient(Class<T> clientClass, String service);

  /**
   * Get an OpenTelemetry tracer for the current action. This will allow for building and automatic
   * exporting of spans.
   *
   * @return A tracer for the current action, if tracing is configured.
   */
  Optional<Tracer> getOpenTelemetryTracer();
}
