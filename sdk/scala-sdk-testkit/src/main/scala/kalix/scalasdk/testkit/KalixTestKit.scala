/*
 * Copyright 2021 Lightbend Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kalix.scalasdk.testkit

import scala.concurrent.ExecutionContext

import akka.actor.ActorSystem
import akka.grpc.GrpcClientSettings
import akka.stream.Materializer
import kalix.scalasdk.Kalix
import kalix.javasdk.testkit.{ KalixTestKit => JTestKit }

/**
 * TestKit for running Akka Serverless services locally.
 *
 * <p>Requires Docker for starting a local instance of the Akka Serverless proxy.
 *
 * <p>Create an AkkaServerlessTestKit with an [[Kalix]] service descriptor, and then [[KalixTestKit.start]] the testkit
 * before testing the service with gRPC or HTTP clients. Call [[KalixTestKit.stop]] after tests are complete.
 */
object KalixTestKit {
  def apply(main: Kalix): KalixTestKit =
    new KalixTestKit(new JTestKit(main.delegate))
}
class KalixTestKit private (delegate: JTestKit) {
  def start(): KalixTestKit = {
    delegate.start()
    this
  }

  /**
   * Get an Akka gRPC client for the given service name. The same client instance is shared for the test. The lifecycle
   * of the client is managed by the SDK and it should not be stopped by user code.
   *
   * @tparam T
   *   The "service" interface generated for the service by Akka gRPC
   * @param clientClass
   *   The class of a gRPC service generated by Akka gRPC
   */
  def getGrpcClient[T](clientClass: Class[T]): T =
    delegate.getGrpcClient(clientClass)

  /**
   * An Akka Stream materializer to use for running streams. Needed for example in a command handler which accepts
   * streaming elements but returns a single async reply once all streamed elements has been consumed.
   */
  def materializer: Materializer =
    delegate.getMaterializer()

  implicit def executionContext: ExecutionContext =
    materializer.executionContext

  /**
   * Get `GrpcClientSettings` for creating Akka gRPC clients.
   *
   * @return
   *   test gRPC client settings
   */
  @deprecated("Use `getGrpcClient` instead.", since = "0.8.1")
  def grpcClientSettings: GrpcClientSettings = delegate.getGrpcClientSettings()

  /**
   * Get an `ActorSystem` for creating Akka HTTP clients.
   */
  def system: ActorSystem = delegate.getActorSystem()

  def stop(): Unit = delegate.stop()
}
