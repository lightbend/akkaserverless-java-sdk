/* This code was generated by Kalix tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package com.example;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import kalix.javasdk.Metadata;
import kalix.javasdk.testkit.jupiter.KalixTestKitExtension;
import org.junit.jupiter.api.extension.RegisterExtension;
import org.junit.jupiter.api.Test;

import java.util.Base64;
import java.util.Map;
import java.util.concurrent.CompletionStage;

import static java.util.concurrent.TimeUnit.SECONDS;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

// Example of an integration test calling our service via the Kalix proxy
// Run all test classes ending with "IntegrationTest" using `mvn verify -Pit`
public class JwtIntegrationTest {

  /**
   * The test kit starts both the service container and the Kalix proxy.
   */
  @RegisterExtension
  public static final KalixTestKitExtension testKit =
      new KalixTestKitExtension(Main.createKalix());

  /**
   * Use the generated gRPC client to call the service through the Kalix proxy.
   */
  // tag::bearer-token-claims-test[]
  private final JwtServiceActionClient client;

  public JwtIntegrationTest() {
    client = (JwtServiceActionClient) testKit.getGrpcClient(CounterService.class); // <1>
  }

  @Test
  public void testMsgWithClaim() throws Exception {
    String bearerToken = bearerTokenWith( // <2>
        Map.of("iss", "my-issuer", "sub", "hello"));

    var msg = "Hello from integration test";
    var req = JwtService.MyRequest.newBuilder().setMsg(msg).build();
    var response = client.jwtInToken()
        .addHeader("Authorization", "Bearer " + bearerToken) // <3>
        .invoke(req)
        .toCompletableFuture()
        .get();

    assertTrue(response.getMsg().contains(msg));
  }

  private String bearerTokenWith(Map<String, String> claims) throws JsonProcessingException {
    // setting algorithm to none
    String alg = Base64.getEncoder()
        .encodeToString("{\"alg\":\"none\"}".getBytes()); // <4>
    byte[] jsonClaims = new ObjectMapper().writeValueAsBytes(claims);

    // no validation is done for integration tests, thus no valid signature required
    return alg + "." +  Base64.getEncoder().encodeToString(jsonClaims); // <5>
  }
  // end::bearer-token-claims-test[]
}
