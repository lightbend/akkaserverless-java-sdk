// Copyright 2021 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package customer.view;

option java_outer_classname = "CustomerViewModel";

import "customer/api/publisher_api.proto";
import "kalix/annotations.proto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

message Customer {
  string customer_id = 1;
  string email = 2;
  string name = 3;
  uint32 updates = 4;
  google.protobuf.Timestamp created = 5;
  google.protobuf.Timestamp lastUpdate = 6;
}

message ByNameRequest {
  string customer_name = 1;
}

// tag::view[]
service AllCustomersView {
  option (kalix.codegen) = {
    view: {}
  };

  // consume events published by java-protobuf-eventsourced-customer-registry/CustomerEventsServiceAction
  option (kalix.service).eventing.in.direct = {// <1>
    service: "customer-registry" // <2>
    event_stream_id: "customer_events" // <3>
  };

  rpc ProcessCustomerCreated(api.Created) returns (Customer) { // <4>
    option (kalix.method).view.update = {
      table: "all_customers"
    };
  }

  rpc ProcessCustomerNameChanged(api.NameChanged) returns (Customer) {
    option (kalix.method).view.update = {
      table: "all_customers"
    };
  }

  rpc GetCustomers(google.protobuf.Empty) returns (stream Customer) {
    option (kalix.method).view.query = {
      query: "SELECT * FROM all_customers"
    };
  }
}
// end::view[]

// tag::view-from-topic[]
service CustomerByNameFromTopic {
  option (kalix.codegen) = {
    view: {}
  };

  rpc ProcessCustomerCreated(api.Created) returns (Customer) {
    option (kalix.method).eventing.in = {
      topic: "customer_events" // <1>
    };
    option (kalix.method).view.update = {
      table: "customers"
    };
  }

  rpc ProcessCustomerNameChanged(api.NameChanged) returns (Customer) {
    option (kalix.method).eventing.in = {
      topic: "customer_events"
    };
    option (kalix.method).view.update = {
      table: "customers"
    };
  }

  rpc GetCustomers(ByNameRequest) returns (stream Customer) {
    option (kalix.method).view.query = {
      query: "SELECT * FROM customers WHERE name = :customer_name"
    };
  }
}
// end::view-from-topic[]