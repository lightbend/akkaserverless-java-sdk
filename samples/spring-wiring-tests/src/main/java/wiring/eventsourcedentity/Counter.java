/* This code was generated by Kalix tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package wiring.eventsourcedentity;

import kalix.javasdk.eventsourcedentity.EventSourcedEntity;
import kalix.springsdk.annotations.Entity;
import kalix.springsdk.annotations.EventHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Entity(entityKey = "id", entityType = "counter")
@RequestMapping("/counter/{id}")
public class Counter extends EventSourcedEntity<Integer> {

    private Logger logger = LoggerFactory.getLogger(getClass());

    @Override
    public Integer emptyState() {
        return 0;
    }

    // how to declare that this entity subscribes to their events?
    // how to know what to implement?
    @PostMapping("/increase/{value}")
    public Effect<String> increase(@PathVariable Integer value) {
        logger.info("Increasing counter with commandId={} commandName={} seqNr={} current={} value={}",
                commandContext().commandId(), commandContext().commandName(), commandContext().sequenceNumber(), currentState(), value);

        return effects()
                .emitEvent(new ValueIncreased(value))
                .thenReply(Object::toString);
    }

    @GetMapping
    public Effect<String> read() {
        logger.info("Reading counter with commandId={} commandName={} seqNr={} current={}",
                commandContext().commandId(), commandContext().commandName(), commandContext().sequenceNumber(), currentState());

        return effects().reply(currentState().toString());
    }

    @PostMapping("/times/{value}")
    public Effect<String> times(@PathVariable Integer value) {
        logger.info("Increasing counter with commandId={} commandName={} seqNr={} current={} value={}",
                commandContext().commandId(), commandContext().commandName(), commandContext().sequenceNumber(), currentState(), value);

        return effects()
                .emitEvent(new ValueMultiplied(value))
                .thenReply(Object::toString);
    }

    @EventHandler
    public Integer handleIncrease(ValueIncreased value) {
        return currentState() + value.value;
    }

    @EventHandler
    public Integer handleMultiply(ValueMultiplied value) {
        return currentState() * value.value;
    }
}