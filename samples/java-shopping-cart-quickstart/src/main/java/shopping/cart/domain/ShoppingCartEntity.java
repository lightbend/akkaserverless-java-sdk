/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package shopping.cart.domain;

// tag::imports[]
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntity;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntity.Effect;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntityContext;
import com.google.protobuf.Empty;
import shopping.cart.api.ShoppingCartApi;

import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.stream.Collectors;
// end::imports[]

/** An event sourced entity. */
public class ShoppingCartEntity extends AbstractShoppingCartEntity {

  @SuppressWarnings("unused")
  private final String entityId;

  public ShoppingCartEntity(EventSourcedEntityContext context) {
    this.entityId = context.entityId();
  }

  // tag::emptyState[]
  @Override
  public ShoppingCartDomain.CartState emptyState() {
    return ShoppingCartDomain.CartState.getDefaultInstance();
  }
  // end::emptyState[]

  // tag::addItem[]
  @Override
  public Effect<Empty> addItem(ShoppingCartDomain.CartState currentState, ShoppingCartApi.AddLineItem addLineItem) {
    if (addLineItem.getQuantity() <= 0) {
      return effects().error("Quantity for item " + addLineItem.getProductId() + " must be greater than zero.");
    }
    ShoppingCartDomain.ItemAdded itemAddedEvent =
            ShoppingCartDomain.ItemAdded.newBuilder()
                    .setItem(
                            ShoppingCartDomain.LineItem.newBuilder()
                                    .setProductId(addLineItem.getProductId())
                                    .setName(addLineItem.getName())
                                    .setQuantity(addLineItem.getQuantity())
                                    .build())
                    .build();
    return effects().emitEvent(itemAddedEvent).thenReply(__ -> Empty.getDefaultInstance());
  }
  // end::addItem[]

  // tag::removeItem[]
  @Override
  public Effect<Empty> removeItem(
          ShoppingCartDomain.CartState currentState,
          ShoppingCartApi.RemoveLineItem command) {
    if (findItemByProductId(currentState, command.getProductId()).isEmpty()) {
      return effects()
              .error(
                      "Cannot remove item " + command.getProductId() + " because it is not in the cart.");
    }

    ShoppingCartDomain.ItemRemoved event =
            ShoppingCartDomain.ItemRemoved.newBuilder().setProductId(command.getProductId()).build();

    return effects()
            .emitEvent(event)
            .thenReply(newState -> Empty.getDefaultInstance());
  }
  private Optional<ShoppingCartDomain.LineItem> findItemByProductId(
          ShoppingCartDomain.CartState cart, String productId) {
    Predicate<ShoppingCartDomain.LineItem> lineItemExists =
            lineItem -> lineItem.getProductId().equals(productId);
    return cart.getItemsList().stream().filter(lineItemExists).findFirst();
  }
  // end::removeItem[]

  // tag::getCart[]
  @Override
  public Effect<ShoppingCartApi.Cart> getCart(
          ShoppingCartDomain.CartState currentState, // <1>
          ShoppingCartApi.GetShoppingCart command) {
    List<ShoppingCartApi.LineItem> apiItems =
            currentState.getItemsList().stream()
                    .map(this::convert)
                    .sorted(Comparator.comparing(ShoppingCartApi.LineItem::getProductId))
                    .collect(Collectors.toList());
    ShoppingCartApi.Cart apiCart =
            ShoppingCartApi.Cart.newBuilder().addAllItems(apiItems).build(); // <2>
    return effects().reply(apiCart);
  }

  private ShoppingCartApi.LineItem convert(ShoppingCartDomain.LineItem item) {
    return ShoppingCartApi.LineItem.newBuilder()
            .setProductId(item.getProductId())
            .setName(item.getName())
            .setQuantity(item.getQuantity())
            .build();
  }
  // end::getCart[]

  // tag::itemAdded[]
  @Override
  public ShoppingCartDomain.CartState itemAdded(ShoppingCartDomain.CartState currentState, ShoppingCartDomain.ItemAdded itemAdded) {
    Map<String, ShoppingCartApi.LineItem> cart = domainCartToMap(currentState);
    ShoppingCartApi.LineItem item = cart.get(itemAdded.getItem().getProductId());
    if (item == null) {
      item = domainItemToApi(itemAdded.getItem());
    } else {
      item =
              item.toBuilder()
                      .setQuantity(item.getQuantity() + itemAdded.getItem().getQuantity())
                      .build();
    }
    cart.put(item.getProductId(), item);
    return mapToDomainCart(cart);
  }

  private ShoppingCartApi.LineItem domainItemToApi(ShoppingCartDomain.LineItem item) {
    return ShoppingCartApi.LineItem.newBuilder()
            .setProductId(item.getProductId())
            .setName(item.getName())
            .setQuantity(item.getQuantity())
            .build();
  }
  private Map<String, ShoppingCartApi.LineItem> domainCartToMap(ShoppingCartDomain.CartState state) {
    return state.getItemsList().stream().collect(Collectors.toMap(ShoppingCartDomain.LineItem::getProductId, this::domainItemToApi));
  }
  private ShoppingCartDomain.CartState mapToDomainCart(Map<String, ShoppingCartApi.LineItem> cart) {
    return ShoppingCartDomain.CartState.newBuilder()
            .addAllItems(cart.values().stream().map(this::apiItemToDomain).collect(Collectors.toList()))
            .build();
  }
  private ShoppingCartDomain.LineItem apiItemToDomain(ShoppingCartApi.LineItem item) {
    return ShoppingCartDomain.LineItem.newBuilder()
            .setProductId(item.getProductId())
            .setName(item.getName())
            .setQuantity(item.getQuantity())
            .build();
  }
  // end::itemAdded[]

  // tag::itemRemoved[]
  @Override
  public ShoppingCartDomain.CartState itemRemoved(
          ShoppingCartDomain.CartState currentState,
          ShoppingCartDomain.ItemRemoved itemRemoved) {
    List<ShoppingCartDomain.LineItem> items =
            removeItemByProductId(currentState, itemRemoved.getProductId());
    items.sort(Comparator.comparing(ShoppingCartDomain.LineItem::getProductId));
    return ShoppingCartDomain.CartState.newBuilder().addAllItems(items).build();
  }
  private List<ShoppingCartDomain.LineItem> removeItemByProductId(
          ShoppingCartDomain.CartState cart, String productId) {
    return cart.getItemsList().stream()
            .filter(lineItem -> !lineItem.getProductId().equals(productId))
            .collect(Collectors.toList());
  }
  // end::itemRemoved[]

}