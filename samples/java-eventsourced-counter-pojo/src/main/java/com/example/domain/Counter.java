/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package com.example.domain;

import com.akkaserverless.javasdk.SideEffect;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntity.Effect;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntityContext;
import com.example.CounterApi;
import com.google.protobuf.Empty;

/** An event sourced entity. */
public class Counter extends AbstractCounter {

  @SuppressWarnings("unused")
  private final String entityId;

  public Counter(EventSourcedEntityContext context) {
    this.entityId = context.entityId();
  }

  @Override
  public CounterState emptyState() {
    return new CounterState(0);
  }

  private CounterState updateState(CounterState currentState, int value) {
    return currentState.increase(value);
  }

  @Override
  public Effect<Empty> increase(CounterState currentState, CounterApi.IncreaseValue increaseValue) {
    if (increaseValue.getValue() < 0)
      return effects().error("Value must be a zero or a positive number");
    else
      return effects()
              .emitEvent(ValueIncreased.of(increaseValue.getValue()))
              .thenReply(__ -> Empty.getDefaultInstance());
  }

  @Override
  public Effect<Empty> increaseWithSideEffect(CounterState currentState, CounterApi.IncreaseValue increaseValue) {
     int doubled = increaseValue.getValue() * 2;
    CounterApi.IncreaseValue increaseValueDoubled =
        increaseValue.toBuilder().setValue(doubled).build(); 

    if (increaseValue.getValue() < 0)
      return effects().error("Value must be a zero or a positive number");
    else
      return effects()
              .emitEvent(ValueIncreased.of(increaseValue.getValue()))
              .thenAddSideEffect(__ -> SideEffect.of(components().counter().increase(increaseValueDoubled)))
              .thenReply(__ -> Empty.getDefaultInstance());
  }

  @Override
  public Effect<Empty> decrease(CounterState currentState, CounterApi.DecreaseValue decreaseValue) {
    if (decreaseValue.getValue() > 0){
      return effects().error("Value must be a zero or a negative number");
    } else if(currentState.decrease(decreaseValue.getValue()).value < 0){
      return effects().error("Decrease value is too high. Counter cannot become negative");
    } else {
      return effects()
          .emitEvent(ValueDecreased.of(decreaseValue.getValue()))
          .thenReply(__ -> Empty.getDefaultInstance());
    }
  }

  @Override
  public Effect<Empty> reset(CounterState currentState, CounterApi.ResetValue resetValue) {
    return effects()
            .emitEvent(ValueReset.INSTANCE)
            .thenReply(__ -> Empty.getDefaultInstance());
  }

  @Override
  public Effect<CounterApi.CurrentCounter> getCurrentCounter(CounterState currentState, CounterApi.GetCounter getCounter) {
    CounterApi.CurrentCounter counter =
        CounterApi.CurrentCounter.newBuilder()
            .setValue(currentState.value)
            .build();
    return effects().reply(counter);
  }

  @Override
  public CounterState valueIncreased(CounterState currentState, ValueIncreased valueIncreased) {
    return currentState.increase(valueIncreased.value);

  }
  @Override
  public CounterState valueDecreased(CounterState currentState, ValueDecreased valueDecreased) {
    return currentState.decrease(valueDecreased.value);
  }
  @Override
  public CounterState valueReset(CounterState currentState, ValueReset valueReset) {
    return emptyState();
  }

}