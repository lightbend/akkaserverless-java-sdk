// Copyright 2021 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package customer.view;

import "customer/api/customer_api.proto";
import "customer/api/publisher_api.proto";
import "kalix/annotations.proto";
import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

message ByNameRequest {
  string customer_name = 1;
}

service CustomerByNameSubscriber {
  option (kalix.codegen) = {
    action: {}
  };

  // consume events published by scala-eventsourced-customer-registry/CustomerEventsServiceAction
  option (kalix.service).eventing.in.direct = {
    // Normally the Kalix service deployment name
    // (but localhost + hardcoded port here to be able to run both locally)
    service: "localhost:9000"
    // stream id from service above
    event_stream_id: "customer_events"
  };

  rpc ProcessCustomerCreated(api.Created) returns (google.protobuf.Empty) { };
  rpc ProcessCustomerNameChanged(api.NameChanged) returns (google.protobuf.Empty) { };
}

/*
Doesn't work right now because views require method level eventing in on views
service CustomerByName {
  option (kalix.codegen) = {
    view: {}
  };

  // consume events published by scala-eventsourced-customer-registry/CustomerEventsServiceAction
  option (kalix.service).eventing.in.direct = {
    // Normally the Kalix service deployment name
    // (but localhost + hardcoded port here to be able to run both locally)
    service: "localhost:9000"
    // stream id from service above
    event_stream_id: "customer_events"
  };

  rpc ProcessCustomerCreated(api.Created) returns (api.Customer) {
    option (kalix.method).view.update = {
      table: "customers"
      transform_updates: true
    };
  }

  rpc ProcessCustomerNameChanged(api.NameChanged) returns (api.Customer) {
    option (kalix.method).view.update = {
      table: "customers"
      transform_updates: true
    };
  }

  rpc GetCustomers(ByNameRequest) returns (stream api.Customer) {
    option (kalix.method).view.query = {
      query: "SELECT * FROM customers WHERE name = :customer_name"
    };
  }
}

 */