/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */

package com.example;

import com.akkaserverless.javasdk.action.ActionCreationContext;
import com.google.protobuf.Empty;

import java.util.concurrent.CompletionStage;

/** An action. */
public class DelegatingServiceAction extends AbstractDelegatingServiceAction {

  public DelegatingServiceAction(ActionCreationContext creationContext) {}

  // tag::delegating-action[]
  @Override
  public Effect<DelegatingServiceApi.Result> addAndReturn(DelegatingServiceApi.Request request) {
    CounterService counterService = actionContext().getGrpcClient(CounterService.class, "counter"); // <1>

    CounterApi.IncreaseValue increaseValue = CounterApi.IncreaseValue.newBuilder()
        .setCounterId(request.getCounterId())
        .setValue(1)
        .build();
    CompletionStage<Empty> increaseCompleted = counterService.increase(increaseValue);  // <2>

    CompletionStage<CounterApi.CurrentCounter> currentCounterValueAfter = increaseCompleted.thenCompose((empty) -> // <3>
        // once increase completed successfully, ask for the current state after
        counterService.getCurrentCounter(CounterApi.GetCounter.newBuilder().setCounterId("the-counter").build())
    );

    // turn the reply from the other service into our reply type
    CompletionStage<DelegatingServiceApi.Result> result = currentCounterValueAfter.thenApply(currentCounter ->  // <4>
        DelegatingServiceApi.Result.newBuilder().setValue(currentCounter.getValue()).build());

    return effects().asyncReply(result);  // <5>
  }
  // end::delegating-action[]
}
