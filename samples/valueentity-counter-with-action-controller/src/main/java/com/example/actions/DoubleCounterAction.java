/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */

package com.example.actions;

import com.akkaserverless.javasdk.ServiceCallRef;
import com.akkaserverless.javasdk.action.ActionCreationContext;
import com.example.CounterApi;
import com.google.protobuf.Empty;

// tag::double-counter-action[]
/** An action. */
public class DoubleCounterAction extends AbstractDoubleCounterAction {

  private final ActionCreationContext creationContext; // <1>

  public DoubleCounterAction(ActionCreationContext creationContext) {
    this.creationContext = creationContext;
  }

  /** Handler for "Increase". */
  @Override
  public Effect<Empty> increase(CounterApi.IncreaseValue increaseValue) {

    int doubled = increaseValue.getValue() * 2;
    CounterApi.IncreaseValue increaseValueDoubled =
        increaseValue.toBuilder().setValue(doubled).build(); // <2>

    ServiceCallRef<CounterApi.IncreaseValue> callRef = // <3>
        creationContext.serviceCallFactory()
          .lookup(
              "com.example.CounterService",
              "Increase",
              CounterApi.IncreaseValue.class);

    return effects().forward(callRef.createCall(increaseValueDoubled)); // <4>
  }
}
// end::double-counter-action[]
