/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */

package shopping.product.actions;

import com.akkaserverless.javasdk.ServiceCallRef;
import com.akkaserverless.javasdk.action.ActionCreationContext;
import com.google.protobuf.Any;
import com.google.protobuf.Empty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import shopping.cart.domain.ShoppingCartDomain;
import shopping.product.api.ProductPopularityApi;

;
// tag::annotation[]

/** An action. */
public class ToProductPopularityServiceAction extends AbstractToProductPopularityServiceAction {
  // end::annotation[]
  private static final Logger LOG = LoggerFactory.getLogger(ToProductPopularityServiceAction.class);

  // tag::forwardRemoved[]
  private static final String POPULARITY_SERVICE = "shopping.product.api.ProductPopularityService";
  // end::forwardRemoved[]

  private final ServiceCallRef<ProductPopularityApi.IncreasePopularity> increaseRef;

  public ToProductPopularityServiceAction(ActionCreationContext creationContext) {
    increaseRef =
        creationContext
            .serviceCallFactory()
            .lookup(POPULARITY_SERVICE, "Increase", ProductPopularityApi.IncreasePopularity.class);
  }

  // tag::methods[]
  @Override
  public Effect<Empty> forwardAdded(ShoppingCartDomain.ItemAdded itemAdded) {  // <1>
    // end::methods[]

    ProductPopularityApi.IncreasePopularity increase =
        ProductPopularityApi.IncreasePopularity.newBuilder()
            .setProductId(itemAdded.getItem().getProductId())
            .setQuantity(itemAdded.getItem().getQuantity())
            .build();

    LOG.info("Received: '{}', publishing: {}", itemAdded, increase);
    return effects().forward(increaseRef.createCall(increase));
    // tag::methods[]
  }
  // tag::forwardRemoved[]

  @Override
  public Effect<Empty> forwardRemoved(ShoppingCartDomain.ItemRemoved itemRemoved) {
    // end::methods[]

    ProductPopularityApi.DecreasePopularity decrease = // ... <2>
        // end::forwardRemoved[]
        ProductPopularityApi.DecreasePopularity.newBuilder()
            .setProductId(itemRemoved.getProductId())
            .setQuantity(itemRemoved.getQuantity())
            .build();

    LOG.info("Received: '{}', publishing: {}", itemRemoved, decrease);
    // tag::forwardRemoved[]
    ServiceCallRef<ProductPopularityApi.DecreasePopularity> decreaseRef =
        actionContext().serviceCallFactory()
            .lookup(
                POPULARITY_SERVICE, // <3>
                "Decrease", // <4>
                ProductPopularityApi.DecreasePopularity.class // <5>
            );
    return effects().forward(decreaseRef.createCall(decrease)); // <6>
    // tag::methods[]
  }
  // end::forwardRemoved[]
  // end::methods[]

  @Override
  public Effect<Empty> catchOthers(Any any) {
    return effects().noReply();
  }
}