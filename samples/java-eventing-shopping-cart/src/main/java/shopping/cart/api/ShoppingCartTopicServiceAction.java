/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */

package shopping.cart.api;

import com.akkaserverless.javasdk.JsonSupport;
import com.akkaserverless.javasdk.ServiceCallRef;
import com.akkaserverless.javasdk.action.ActionCreationContext;
import com.google.protobuf.Any;
import com.google.protobuf.Empty;
import shopping.cart.actions.TopicMessage;
/** This action illustrates the consumption from a topic (shopping-cart-operations). */
// tag::receiving-json-messages[]
public class ShoppingCartTopicServiceAction 
  extends AbstractShoppingCartTopicServiceAction {
// end::receiving-json-messages[]
  private final String forwardTo = "shopping.cart.api.ShoppingCartService";

  public ShoppingCartTopicServiceAction(ActionCreationContext creationContext) {}

  /** Akka Serverless expects some metadata to determine the target protobuf type. */
  @Override
  public Effect<Empty> protobufFromTopic(ShoppingCartTopic.TopicOperation topicOperation) {
    if ("add".equals(topicOperation.getOperation())) {
      ShoppingCartApi.AddLineItem increase =
          ShoppingCartApi.AddLineItem.newBuilder()
              .setCartId(topicOperation.getCartId())
              .setProductId(topicOperation.getProductId())
              .setName(topicOperation.getName())
              .setQuantity(topicOperation.getQuantity())
              .build();

      ServiceCallRef<ShoppingCartApi.AddLineItem> call =
          actionContext().serviceCallFactory().lookup(forwardTo, "AddItem", ShoppingCartApi.AddLineItem.class);
      return effects().forward(call.createCall(increase));
    } else {
      return effects().error("The operation [" + topicOperation.getOperation() + "] is not implemented.");
    }
  }

  // tag::receiving-json-messages[]
  /**
   * Note that the protobuf rpc is declared with `Any` 
   * and parsing JSON in the event is done explicitly
   */
  @Override
  public Effect<Empty> jsonFromTopic(Any any) {
    TopicMessage message = JsonSupport.decodeJson(TopicMessage.class, any);
    // end::receiving-json-messages[]
    /* we don't show the full impl in the docs, only 3 dots and a default reply
    // tag::receiving-json-messages[]
    ...
    effects().reply(Empty.getDefaultInstance());
    // end::receiving-json-messages[]
    */
    if ("add".equals(message.getOperation())) {
      ShoppingCartApi.AddLineItem add =
          ShoppingCartApi.AddLineItem.newBuilder()
              .setCartId(message.getCartId())
              .setProductId(message.getProductId())
              .setName(message.getName())
              .setQuantity(message.getQuantity())
              .build();
      ServiceCallRef<ShoppingCartApi.AddLineItem> addItemCall =
          actionContext().serviceCallFactory().lookup(forwardTo, "AddItem", ShoppingCartApi.AddLineItem.class);
      return effects().forward(addItemCall.createCall(add));
    } else if ("remove".equals(message.getOperation())) {
      ShoppingCartApi.RemoveLineItem remove =
          ShoppingCartApi.RemoveLineItem.newBuilder()
              .setCartId(message.getCartId())
              .setProductId(message.getProductId())
              .setQuantity(message.getQuantity())
              .build();
      ServiceCallRef<ShoppingCartApi.RemoveLineItem> removeItemCall =
          actionContext().serviceCallFactory()
              .lookup(forwardTo, "RemoveItem", ShoppingCartApi.RemoveLineItem.class);
      return effects().forward(removeItemCall.createCall(remove));
    } else {
      return effects().error("The operation [" + message.getOperation() + "] is not implemented.");
    }  
  // tag::receiving-json-messages[]  
  }
}
// end::receiving-json-messages[]