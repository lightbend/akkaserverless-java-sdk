/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */

package com.example.fibonacci;

import com.akkaserverless.javasdk.action.ActionCreationContext;

import java.util.function.Predicate;

/** An action. */
public class FibonacciAction extends AbstractFibonacciAction { // <1>

  public FibonacciAction(ActionCreationContext creationContext) {}


  // tag::implemented-action[]
  private boolean isFibonacci(long num) {  // <1>
    Predicate<Long> isPerfectSquare = (n) -> {
      long square = (long) Math.sqrt(n);
      return square*square == n;
    };
    return isPerfectSquare.test(5*num*num + 4) || isPerfectSquare.test(5*num*num - 4);
  }
  private long nextFib(long num) {
    double result = num * (1 + Math.sqrt(5)) / 2.0;
    return Math.round(result);
  }

  /** Handler for "NextNumber". */
  @Override
  public Effect<FibonacciApi.Number> nextNumber(FibonacciApi.Number number) {
    long num = number.getValue();
    if (isFibonacci(num)) { //<2>
      long nextFib = nextFib(num);
      FibonacciApi.Number response =
          FibonacciApi.Number
              .newBuilder()
              .setValue(nextFib)
              .build();
      return effects().reply(response);
    } else {
      return effects() //<3>
               .error("Input number is not a Fibonacci number, received '" + num + "'");
    }
  }
  // end::implemented-action[]
}