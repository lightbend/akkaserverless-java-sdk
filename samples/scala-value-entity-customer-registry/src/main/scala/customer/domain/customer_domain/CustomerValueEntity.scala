/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */

package customer.domain.customer_domain

import com.akkaserverless.scalasdk.valueentity.ValueEntity
import com.akkaserverless.scalasdk.valueentity.ValueEntityContext
import com.google.protobuf.empty.Empty
import customer.api.customer_api

/** A value entity. */
class CustomerValueEntity(context: ValueEntityContext) extends AbstractCustomerValueEntity {
  override def emptyState: CustomerState =
    throw new UnsupportedOperationException("Not implemented yet, replace with your empty entity state")

  override def create(currentState: CustomerState, command: customer_api.Customer): ValueEntity.Effect[Empty] =
    effects.error("The command handler for `Create` is not implemented, yet");

  override def changeName(currentState: CustomerState, command: customer_api.ChangeNameRequest): ValueEntity.Effect[Empty] =
    effects.error("The command handler for `ChangeName` is not implemented, yet");

  override def changeAddress(currentState: CustomerState, command: customer_api.ChangeAddressRequest): ValueEntity.Effect[Empty] =
    effects.error("The command handler for `ChangeAddress` is not implemented, yet");

  override def getCustomer(currentState: CustomerState, command: customer_api.GetCustomerRequest): ValueEntity.Effect[customer_api.Customer] =
    effects.error("The command handler for `GetCustomer` is not implemented, yet");
}
