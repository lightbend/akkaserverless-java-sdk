/* This code was generated by Kalix tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */

package com.example.actions;

import com.example.CounterApi;
import kalix.javasdk.action.Action;
import kalix.javasdk.action.ActionCreationContext;
import com.google.protobuf.Empty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// tag::counter-topic-sub[]
public class CounterTopicSubscriptionAction extends AbstractCounterTopicSubscriptionAction {

  private Logger logger = LoggerFactory.getLogger(getClass());

  private ActionCreationContext creationContext;

  public CounterTopicSubscriptionAction(ActionCreationContext creationContext) {
    this.creationContext = creationContext;
  }

  @Override
  public Effect<Empty> onIncreased(CounterTopicApi.Increased increased) { //<1>
    var entityId = actionContext().eventSubject();

    if (entityId.isEmpty()) {
      logger.warn("Could not find ce-subject metadata, skipping message.");
      return effects().ignore();
    }

    logger.info("Received increase event: " + increased.getValue() + " with ce-subject " + entityId.get());
    return effects().forward(components().counter().increase(
        CounterApi.IncreaseValue.newBuilder()
            .setCounterId(entityId.get())
            .setValue(increased.getValue())
            .build()));
  }

  @Override
  public Effect<Empty> onDecreased(CounterTopicApi.Decreased decreased) {
    logger.info("Received increase event: " + decreased.toString());
    return effects().reply(Empty.getDefaultInstance());
  }
}
// end::counter-topic-sub[]