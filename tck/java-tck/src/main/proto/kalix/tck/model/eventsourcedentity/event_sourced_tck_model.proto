// Copyright (C) 2021-2024 Lightbend Inc. <https://www.lightbend.com>

//
// == Kalix TCK model test for event-sourced entities ==
// see tck/src/main/scala/kalix/tck/EventSourcedEntityTCK.scala

syntax = "proto3";

package kalix.tck.model.eventsourcedentity;

option java_package = "kalix.tck.model.eventsourcedentity";
option java_multiple_files = true;

import "kalix/annotations.proto";
import "google/api/annotations.proto";
import "kalix/tck/model/eventsourcedentity/event_sourced_entity_api.proto";


//
// The `EventSourcedTckModel` service should be implemented in the following ways:
//
// - The entity persistence-id must be `event-sourced-tck-model`.
// - Snapshots must be configured for every 5 events.
// - The state of the entity is simply a string.
// - Event and snapshot string values are wrapped in `Persisted` messages.
// - The snapshot handler must set the state to the value of a `Persisted` message.
// - The event handler must append the value of a `Persisted` message to the state string.
// - The `Process` method receives a `Request` message with actions to take.
// - Request actions must be processed in order, and can require emitting events, forwarding, side effects, or failing.
// - The `Process` method must reply with the state in a `Response`, after taking actions, unless forwarding or failing.
// - Forwarding and side effects must always be made to the second service `EventSourcedTwo`.
//
service EventSourcedTckModel {
  option (kalix.codegen) = {
    event_sourced_entity: {
      name: "EventSourcedTckModelEntity"
      type_id: "event-sourced-tck-model"
      state: "Persisted"
      events: ["Persisted"]
    }
  };

  rpc Process(Request) returns (Response) {
    option (google.api.http) = {
      post: "/tck/model/eventsourced/{id}"
      body: "*"
    };
  }
}

//
// The `Persisted` message wraps both snapshot and event values.
//
message Persisted {
  string value = 1;
}
