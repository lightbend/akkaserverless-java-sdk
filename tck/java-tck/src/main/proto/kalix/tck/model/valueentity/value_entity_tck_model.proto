// Copyright 2024 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// == Kalix TCK model test for value-based entities ==
// see tck/src/main/scala/kalix/tck/EntityTCK.scala

syntax = "proto3";

package kalix.tck.model.valueentity;

option java_package = "kalix.tck.model.valueentity";
option java_multiple_files = true;

import "kalix/annotations.proto";
import "google/api/annotations.proto";

import "kalix/tck/model/valueentity/value_entity_api.proto";


//
// The `ValueEntityTckModel` service should be implemented in the following ways:
//
// - The entity persistence-id must be `value-entity-tck-model`.
// - The state of the entity is simply a string.
// - The state string values is wrapped in `Persisted` messages.
// - The command handler must set the state to the value of a `Persisted` message.
// - The `Process` method receives a `Request` message with actions to take.
// - Request actions must be processed in order, and can require: updating state, deleting state, forwarding, side
//   effects, or failing.
// - The `Process` method must reply with the state in a `Response`, after taking actions, unless forwarding or failing.
// - Forwarding and side effects must always be made to the second service `ValueEntityTwo`.
//
service ValueEntityTckModel {

  option (kalix.codegen) = {
    value_entity: {
      name: "ValueEntityTckModelEntity"
      entity_type: "value-entity-tck-model"
      state: "Persisted"
    }
  };

  rpc Process(Request) returns (Response) {
    option (google.api.http) = {
      post: "/tck/model/entity/{id}"
      body: "*"
    };
  }
}

//
// The `Persisted` message wraps both state value.
//
message Persisted {
  string value = 1;
}
