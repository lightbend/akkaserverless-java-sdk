// Copyright (C) 2021-2024 Lightbend Inc. <https://www.lightbend.com>

//
// == Kalix TCK model test for event-sourced entities ==
// see tck/src/main/scala/kalix/tck/EventSourcedEntityTCK.scala

syntax = "proto3";

package kalix.tck.model.eventsourcedentity;

option java_package = "kalix.tck.model.eventsourcedentity";

import "kalix/annotations.proto";

//
// A `Request` message contains any actions that the entity should process.
// Actions must be processed in order. Any actions after a `Fail` may be ignored.
//
message Request {
  string id = 1 [(kalix.field).id = true];
  repeated RequestAction actions = 2;
}

//
// Each `RequestAction` is one of:
//
// - Emit: emit an event, with a given value.
// - Forward: forward to another service, in place of replying with a Response.
// - Effect: add a side effect to another service to the reply.
// - Fail: fail the current `Process` command.
//
message RequestAction {
  oneof action {
    Emit emit = 1;
    Forward forward = 2;
    Effect effect = 3;
    Fail fail = 4;
  }
}

//
// Emit an event, with the event value in a `Persisted` message.
//
message Emit {
  string value = 1;
}

//
// Replace the response with a forward to `kalix.tck.model.EventSourcedTwo/Call`.
// The payload must be a `Request` message with the given `id`.
//
message Forward {
  string id = 1;
}

//
// Add a side effect to the reply, to `kalix.tck.model.EventSourcedTwo/Call`.
// The payload must be a `Request` message with the given `id`.
// The side effect should be marked synchronous based on the given `synchronous` value.
//
message Effect {
  string id = 1;
  bool synchronous = 2;
}

//
// Fail the current command with the given description `message`.
//
message Fail {
  string message = 1;
}

//
// The `Response` message for the `Process` must contain the current state (after processing actions).
//
message Response {
  string message = 1;
}
