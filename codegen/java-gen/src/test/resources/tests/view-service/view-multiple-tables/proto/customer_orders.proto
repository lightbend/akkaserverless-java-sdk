// Copyright 2024 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package org.example.view;

import "kalix/annotations.proto";

option java_outer_classname = "CustomerOrdersViewModel";

message CustomerOrdersRequest {
  string customer_id = 1;
}

message CustomerOrder {
  string order_id = 1;
  string customer_id = 2;
  string product_id = 3;
  string product_name = 4;
  int32 quantity = 5;
  string name = 6;
  string email = 7;
}

message CustomerCreated {
  string customer_id = 1;
  string email = 2;
  string name = 3;
}

message CustomerNameChanged {
  string customer_id = 1;
  string new_name = 3;
}

message Customer {
  string customer_id = 1;
  string email = 2;
  string name = 3;
}

message ProductCreated {
  string product_id = 1;
  string product_name = 2;
}

message Product {
  string product_id = 1;
  string product_name = 2;
}

message Order {
  string order_id = 1;
  string product_id = 2;
  string customer_id = 3;
  int32 quantity = 4;
}

service CustomerOrders {
  option (kalix.codegen) = {
    view: {}
  };

  rpc UpdateCustomerCreated(CustomerCreated) returns (Customer) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "customers"
    };
    option (kalix.method).view.update = {
      table: "customers",
    };
  }

  rpc UpdateCustomerNameChanged(CustomerNameChanged) returns (Customer) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "customers"
    };
    option (kalix.method).view.update = {
      table: "customers",
    };
  }

  rpc UpdateProduct(ProductCreated) returns (Product) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "products"
    };
    option (kalix.method).view.update = {
      table: "products",
    };
  }

  rpc UpdateOrder(Order) returns (Order) {
    option (kalix.method).eventing.in = {
      value_entity: "orders"
    };
    option (kalix.method).view.update = {
      table: "orders"
    };
  }

  rpc Get(CustomerOrdersRequest) returns (stream CustomerOrder) {
    option (kalix.method).view.query = {
      query: "SELECT * "
          "FROM customers "
          "JOIN orders ON orders.customer_id = customers.customer_id "
          "JOIN products ON products.product_id = orders.product_id "
          "WHERE customers.customer_id = :customer_id"
    };
  }
}

// with `View` in the name
service AnotherCustomerOrdersView {
  option (kalix.codegen) = {
    view: {}
  };

  rpc UpdateCustomerCreated(CustomerCreated) returns (Customer) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "customers"
    };
    option (kalix.method).view.update = {
      table: "customers",
    };
  }

  rpc UpdateCustomerNameChanged(CustomerNameChanged) returns (Customer) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "customers"
    };
    option (kalix.method).view.update = {
      table: "customers",
    };
  }

  rpc UpdateProduct(ProductCreated) returns (Product) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "products"
    };
    option (kalix.method).view.update = {
      table: "products",
    };
  }

  rpc UpdateOrder(Order) returns (Order) {
    option (kalix.method).eventing.in = {
      value_entity: "orders"
    };
    option (kalix.method).view.update = {
      table: "orders"
    };
  }

  rpc Get(CustomerOrdersRequest) returns (stream CustomerOrder) {
    option (kalix.method).view.query = {
      query: "SELECT * "
          "FROM customers "
          "JOIN orders ON orders.customer_id = customers.customer_id "
          "JOIN products ON products.product_id = orders.product_id "
          "WHERE customers.customer_id = :customer_id"
    };
  }
}
