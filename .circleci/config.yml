version: 2.1

orbs:
  build-tools: circleci/build-tools@2.9.0

commands:
  checkout-and-merge-to-main:
    steps:
      - checkout
      - run:
          name: Configure git user
          command: |
            # required by merge-with-parent (for some unknown reason)
            git config user.email "circleci@example.com"
            git config user.name "CircleCI"
      - build-tools/merge-with-parent:
          parent: akkaserverless-main

  install-java-11:
    description: install openjdk-11
    steps:
      - run:
          name: Install java 11
          command: |
            wget https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.8%2B10/OpenJDK11U-jdk_x64_linux_hotspot_11.0.8_10.tar.gz -O /tmp/openjdk-11.tar.gz

            sudo mkdir -p /usr/lib/jvm
            sudo tar xfvz /tmp/openjdk-11.tar.gz --directory /usr/lib/jvm
            rm -f /tmp/openjdk-11.tar.gz

            sudo sh -c 'for bin in /usr/lib/jvm/jdk-11.0.8+10/bin/*; do update-alternatives --install /usr/bin/$(basename $bin) $(basename $bin) $bin 100; done'
            sudo sh -c 'for bin in /usr/lib/jvm/jdk-11.0.8+10/bin/*; do update-alternatives --set $(basename $bin) $bin; done'

  setup_sbt:
    description: "Set up sbt"
    parameters:
      version:
        type: string
        default: "1.4.9"
    steps:
      - install-java-11
      - run:
          name: Install sbt
          command: |
            curl -L -o sbt-<< parameters.version >>.deb https://repo.scala-sbt.org/scalasbt/debian/sbt-<< parameters.version >>.deb
            sudo dpkg -i sbt-<< parameters.version >>.deb
            rm sbt-<< parameters.version >>.deb

  save_deps_cache:
    description: "Save dependency cache"
    steps:
      - save_cache:
          key: deps-cache-01
          paths:
            - "~/.ivy2/cache"
            - "~/.sbt"
            - "~/.cache/coursier"
            - "~/.m2"

  restore_deps_cache:
    description: "Restore dependency cache"
    steps:
      - restore_cache:
          key: deps-cache-01

  set-sdk-version:
    description: "Set global option, grab current SDK version"
    steps:
      - run:
          name: "Set SDK version and global options"
          command: |
            echo "export VERSION_CHECK_ON_STARTUP=false" >> $BASH_ENV
            if [ -e workspace/published-version ]; then
              echo "Extracting version from previous publish step"
              echo 'export SDK_VERSION='`cat workspace/published-version` >> $BASH_ENV
            else
              # tail 2 + head 1 because CircleCI adds an extra line
              # the SDK_VERSION is later used to run the maven tests (see below)
              echo "Extracting version from sbt build"
              echo 'export SDK_VERSION='`sbt "print sdkJava/version" | tail -n 2 | head -n 1` >> $BASH_ENV
            fi

  publish-local:
    description: Build and publish artifacts and plugins locally for other tests to use
    steps:
      - run:
          name: publish m2 and local
          command: sbt publishM2 publishLocal -Ddisable.apidocs=true
      - run:
          name: "Build maven-java"
          command: |
            cd maven-java
            echo "Running maven-java with SDK version: '$SDK_VERSION'"
            mvn versions:set -DnewVersion=$SDK_VERSION
            mvn verify install
      - run: mkdir -p workspace
      - run: cp -r ~/.m2 workspace/
      - run: cp -r ~/.ivy2 workspace/
      - run: echo $SDK_VERSION > workspace/published-version
      # copy published files to workspace for other jobs to pick up rather than build their own
      - persist_to_workspace:
          root: workspace
          paths:
            - .m2
            - .ivy2
            - published-version
  copy-from-workspace:
    description: Copy locally published artifacts from workspace
    steps:
      - attach_workspace:
          at: workspace
      - run: rsync -rv workspace/.m2/ ~/.m2/
      - run: rsync -rv workspace/.ivy2/ ~/.ivy2/

jobs:
  checks:
    docker:
      - image: cimg/openjdk:11.0
    description: "Checks"
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      - run:
          name: Run scalafmt checks
          command: |
            sbt scalafmtCheckAll scalafmtSbtCheck || \
              { echo "[error] Code not formatted prior to commit. Run 'sbt scalafmtAll scalafmtSbt' then commit the reformatted code."; false; }
      - run:
          name: Run javafmt checks
          command: |
            sbt javafmtCheckAll || \
              { echo "[error] Code not formatted prior to commit. Run 'sbt javafmtAll' then commit the reformatted code."; false; }
      - run:
          name: Run header checks
          command: |
            sbt headerCheckAll || \
              { echo "[error] Code missing headers prior to commit. Run 'sbt headerCreateAll' then commit the updated code."; false; }
      - save_deps_cache

  check-sample-sdk-versions:
    machine:
      image: ubuntu-2004:202201-02
    description: "Check all samples have the same SDK version"
    steps:
      - checkout-and-merge-to-main
      - run:
          name: Scala Samples
          command: |
            if [ $(find ./samples -name plugins.sbt | xargs grep -h "akkaserverless-sdk.version" | uniq | wc -l) -ne 1 ]; then
              echo "Not all Scala samples have the same SDK version:"
              find ./samples -name plugins.sbt | xargs grep "akkaserverless-sdk.version"
              false
            fi
      - run:
          name: Java Samples
          command: |
            if [ $(find ./samples -name pom.xml | xargs grep -h "<akkaserverless-sdk.version>" | tr -s [:space:] | uniq | wc -l) -ne 1 ]; then
              echo "Not all Java samples have the same SDK version:"
              find ./samples -name pom.xml | xargs grep "<akkaserverless-sdk.version>"
              false
            fi
      - run:
          name: Protoc version
          command: |
            # tail 2 + head 1 because CircleCI adds an extra line
            AKKA_GRPC_PROTOC=$(sbt "print sdkCore/protocVersion" 2>/dev/null | tail -n 2 | head -n 1)
            POM_PROTOC_VERSIONS=$(find ./samples ./maven-java/ -name pom.xml | xargs egrep -h "com.google.protobuf:protoc:" | sed 's/.*:protoc://' | sed 's/:exe.*//' | sort | uniq)
            if [ $(echo "$POM_PROTOC_VERSIONS" | wc -l) -ne 1 ]; then
              echo  "Not all Java Samples an Archetypes have the same protoc version:"
              find ./samples ./maven-java/ -name pom.xml | xargs egrep "com.google.protobuf:protoc:"
              false
            elif [ "$AKKA_GRPC_PROTOC" != "$POM_PROTOC_VERSIONS" ]; then
              echo  "Java Samples and Archetypes ($POM_PROTOC_VERSIONS) does not have the same protoc version as Akka gRPC ($AKKA_GRPC_PROTOC)"
              false
            fi       

  validate-docs:
    machine:
      image: ubuntu-2004:202201-02
    description: "Validate docs"
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      - run:
          name: Validate docs
          command: |
            make -C docs
      - save_deps_cache

  validate-doc-links:
    machine:
      image: ubuntu-2004:202201-02
    description: "Validate doc links"
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      - run:
          name: Validate links
          command: |
            make -C docs validate-links
      - save_deps_cache

  tests:
    docker:
      - image: cimg/openjdk:11.0
    description: "Tests"
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      - run:
          name: Run tests
          command: sbt test codegenCore/publishLocal codegenScala/publishLocal sdkCore/publishLocal sdkJava/publishLocal sdkScala/publishLocal sdkJavaTestKit/publishLocal sdkScalaTestKit/publishLocal scripted
      - save_deps_cache

  tck-tests:
    machine:
      image: ubuntu-2004:202201-02
    description: "TCK tests"
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      - run:
          name: Run Java TCK tests
          command: sbt tckJava/Test/run
      - run:
          name: Run Scala TCK tests
          command: sbt tckScala/Test/run
      - save_deps_cache

  # by setting a snapshot version with set-sdk-version we publish the deps so that
  # other jobs can use them by depending on this job in the workflow
  publish-local:
    machine:
      image: ubuntu-2004:202201-02
    description: "Build and publish a local version of the artifacts"
    steps:
      - checkout-and-merge-to-main
      - restore_deps_cache
      - setup_sbt
      - set-sdk-version
      - publish-local
      - save_deps_cache

  compile-example-suite-java:
    machine:
      image: ubuntu-2004:202201-02
    description: "Compile Test Projects from Example Suite (Java)"
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      - run:
            name: Compile test projects from ExampleSuite (Java)
            command: sbt -Dexample.suite.java.enabled codegenJavaCompilationExampleSuite/compile
      - save_deps_cache

  compile-example-suite-scala:
    machine:
      image: ubuntu-2004:202201-02
    description: "Compile Test Projects from Example Suite (Scala)"
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      - run:
            name: Compile test projects from ExampleSuite (Scala)
            command: sbt -Dexample.suite.scala.enabled codegenScalaCompilationExampleSuite/compile
      - save_deps_cache      

  verify-all-samples-tested:
    machine:
      image: ubuntu-2004:202201-02
    description: "Check that all samples are included in CI-verification"
    steps:
      - checkout-and-merge-to-main
      - run:
          name: Check that all samples are included in CI-verification
          command: |
            ALL_OK=true
            for SAMPLE in samples/java* samples/scala*
            do
              if [ $(grep -c $SAMPLE .circleci/config.yml) -lt 1 ]
              then
                echo "$SAMPLE is missing CI-tests"
                ALL_OK=false
              fi
            done
            $ALL_OK

  maven-java-tests:
    machine:
      image: ubuntu-2004:202201-02
    description: "Maven Java (plugin and archetype tests)"
    steps:
      - checkout-and-merge-to-main
      - restore_deps_cache
      - setup_sbt
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Run integration tests for Value Entity Archetype
          command: |
            cd maven-java
            mvn -B archetype:generate -DgroupId=com.example -DartifactId=counter-value-entity -DarchetypeGroupId=com.akkaserverless -DarchetypeArtifactId=akkaserverless-maven-archetype -DarchetypeVersion=$SDK_VERSION
            cd counter-value-entity
            mvn -B compile
      - run:
          name: Run integration tests for Event Sourced Entity Archetype
          command: |
            cd maven-java
            mvn -B archetype:generate  -DgroupId=com.example -DartifactId=counter-event-sourced-entity -DarchetypeGroupId=com.akkaserverless -DarchetypeArtifactId=akkaserverless-maven-archetype-event-sourced-entity -DarchetypeVersion=$SDK_VERSION
            cd counter-event-sourced-entity
            mvn -B compile
      - save_deps_cache

  sample-java-customer-registry-quickstart:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Customer Registry quickstart
          command: |
            cd samples/java-customer-registry-quickstart
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            # must also compile without the profile!
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-customer-registry-kafka-quickstart:
    machine: true
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Customer Registry Kafka quickstart
          command: |
            cd samples/java-customer-registry-kafka-quickstart
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            # must also compile without the profile!
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-customer-registry-views-quickstart:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Customer Registry Views quickstart
          command: |
            cd samples/java-customer-registry-views-quickstart
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            # must also compile without the profile!
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-shopping-cart-quickstart:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Shopping Cart quickstart
          command: |
            cd samples/java-shopping-cart-quickstart
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            # must also compile without the profile!
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-fibonacci-action:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Fibonacci Action
          command: |
            cd samples/java-fibonacci-action
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-doc-snippets:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Doc snippets
          command: |
            cd samples/java-doc-snippets
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-first-service:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java first-service by archetype
          command: |
            cd samples/java-first-service
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-valueentity-customer-registry:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Value Entity Views "Customer Registry" sample
          command: |
            cd samples/java-valueentity-customer-registry
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-eventsourced-customer-registry:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Event Sourced Views "Customer Registry" sample
          command: |
            cd samples/java-eventsourced-customer-registry
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-valueentity-shopping-cart:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Value Entity "Shopping Cart" sample
          command: |
            cd samples/java-valueentity-shopping-cart
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-eventsourced-shopping-cart:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Event Sourced Entity "Shopping Cart" sample
          command: |
            cd samples/java-eventsourced-shopping-cart
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-replicatedentity-shopping-cart:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Replicated Entity "Shopping Cart" sample
          command: |
            cd samples/java-replicatedentity-shopping-cart
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-eventsourced-counter:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Event Sourced "Counter" sample
          command: |
            cd samples/java-eventsourced-counter
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test
            # FIXME related to https://github.com/lightbend/akkaserverless-java-sdk/issues/297
            # mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-valueentity-counter:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Value Entity "Counter" sample
          command: |
            cd samples/java-valueentity-counter
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-java-valueentity-counter-spring-client:
    machine: true
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Spring Client for Java Value Entity "Counter" sample
          command: |
            cd samples/java-valueentity-counter-spring-client
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION compile

  sample-java-replicatedentity-examples:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Java Replicated Entity examples
          command: |
            cd samples/java-replicatedentity-examples
            echo "Running mvn with SDK version: '$SDK_VERSION'"
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION verify -Pit
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            mvn -Dakkaserverless-sdk.version=$SDK_VERSION test-compile

  sample-scala-doc-snippets:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Documentation Snippets
          command: |
            cd samples/scala-doc-snippets
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION compile
            # FIXME tests && integration tests
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/scala src/test/scala src/it/scala
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  sample-scala-fibonacci-action:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Fibonacci Action
          command: |
            cd samples/scala-fibonacci-action
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test
            # FIXME tests && integration tests
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/scala src/test/scala src/it/scala
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  sample-scala-valueentity-customer-registry:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Value Entity Customer Registry
          command: |
            cd samples/scala-valueentity-customer-registry
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test
            # FIXME integration tests
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/scala src/test/scala src/it/scala
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  sample-scala-customer-registry-quickstart:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Customer Registry Quickstart
          command: |
            cd samples/scala-customer-registry-quickstart
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test
            # FIXME integration tests
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/scala src/test/scala src/it/scala
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  sample-scala-eventsourced-customer-registry:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Event Sourced Customer Registry
          command: |
            cd samples/scala-eventsourced-customer-registry
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test
            # FIXME integration tests
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/scala src/test/scala src/it/scala
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  sample-scala-first-service:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Service
          command: |
            cd samples/scala-first-service
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile
            # FIXME integration tests
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/scala src/test/scala src/it/scala
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  sample-scala-valueentity-counter:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Value Entity Counter
          command: |
            cd samples/scala-valueentity-counter
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test
            # FIXME integration tests
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/scala src/test/scala src/it/scala
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  sample-scala-eventsourced-counter:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Event Sourced Entity Counter
          command: |
            cd samples/scala-eventsourced-counter
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test
            # FIXME integration tests
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/scala src/test/scala src/it/scala
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  sample-scala-eventsourced-shopping-cart:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Event Sourced Shopping Cart
          command: |
            cd samples/scala-eventsourced-shopping-cart
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test
            # FIXME integration tests
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/scala src/test/scala src/it/scala
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  sample-scala-replicatedentity-shopping-cart:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Replicated Entity "Shopping Cart" sample
          command: |
            cd samples/scala-replicatedentity-shopping-cart
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  sample-scala-replicatedentity-examples:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Replicated Entity examples
          command: |
            cd samples/scala-replicatedentity-examples
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  sample-scala-valueentity-shopping-cart:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      # note: `copy-from-workspace` requires `publish-local` to be run first as declared in workflow section below
      - copy-from-workspace
      - set-sdk-version
      - run:
          name: Scala Value Entity Shopping Cart
          command: |
            cd samples/scala-valueentity-shopping-cart
            echo "Running sbt with SDK version: '$SDK_VERSION'"
            echo "Version check: $VERSION_CHECK_ON_STARTUP"
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test
            echo "==== Verifying that generated unmanaged sources compile ===="
            rm -rf src/main/java src/test/java src/it/java
            sbt -Dakkaserverless-sdk.version=$SDK_VERSION test:compile

  publish:
    docker:
      - image: circleci/openjdk:11
    steps:
      - checkout
      - setup_sbt
      - restore_deps_cache
      - run: sbt ci-release
      - save_deps_cache

  publish-maven:
    docker:
      - image: circleci/openjdk:11
    steps:
      - checkout
      - restore_deps_cache
      - setup_sbt
      - set-sdk-version
      - run:
          name: publish m2
          command: sbt publishM2
      - run:
          name: Publish maven plugin and archetype
          command: |
            cd maven-java
            echo $PGP_SECRET | base64 -d | gpg --import --batch
            mkdir -p ~/.m2
            cat >~/.m2/settings.xml \<<EOF;
            <settings xmlns="http://maven.apache.org/SETTINGS/1.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd">
            <servers>
              <server>
                <id>ossrh</id>
                <username>$SONATYPE_USERNAME</username>
                <password>$SONATYPE_PASSWORD</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>ossrh</id>
                <activation>
                  <activeByDefault>true</activeByDefault>
                </activation>
                <properties>
                  <gpg.passphrase>$PGP_PASSPHRASE</gpg.passphrase>
                </properties>
              </profile>
            </profiles>
            </settings>
            EOF
            mvn -B versions:set -DnewVersion=$SDK_VERSION
            mvn -P release -B deploy

  publish-tck:
    docker:
      - image: circleci/openjdk:11
    steps:
      - checkout
      - setup_remote_docker
      - setup_sbt
      - restore_deps_cache
      - run: bin/docker-login-public-gcr.sh
      - run: sbt tckJava/Docker/publish
      - run: sbt tckScala/Docker/publish
      - save_deps_cache

  publish-docs:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - setup_sbt
      - restore_deps_cache
      # deploy key for pushing docs to branch
      - add_ssh_keys:
          fingerprints:
            - "fd:fd:d3:9d:88:2c:df:5c:5d:b9:c0:2f:43:c6:b8:82"
      - run:
          name: Publish docs
          command: make -C docs deploy
      - save_deps_cache

workflows:
  CI:
    jobs:
      - checks
      - publish-local
      - check-sample-sdk-versions
      - verify-all-samples-tested

      - validate-docs:
          requires:
            - checks
      - validate-doc-links:
          requires:
            - checks
      - tests:
          requires:
            - checks

      - tck-tests:
          requires:
            - checks

      - compile-example-suite-java:
          requires:
            - checks

      - compile-example-suite-scala:
          requires:
            - checks

      - maven-java-tests:
          requires:
            - checks
            - publish-local

      # individual samples as jobs to allow parallelizing them
      - sample-java-customer-registry-quickstart:
          requires:
            - checks
            - publish-local
      - sample-java-customer-registry-views-quickstart:
          requires:
            - checks
            - publish-local
      - sample-java-shopping-cart-quickstart:
          requires:
            - checks
            - publish-local
      - sample-java-fibonacci-action:
          requires:
            - checks
            - publish-local
      - sample-java-doc-snippets:
          requires:
            - checks
            - publish-local
      - sample-java-first-service:
          requires:
            - checks
            - publish-local
      - sample-java-valueentity-customer-registry:
          requires:
            - checks
            - publish-local
      - sample-java-eventsourced-customer-registry:
          requires:
            - checks
            - publish-local
      - sample-java-valueentity-shopping-cart:
          requires:
            - checks
            - publish-local
      - sample-java-eventsourced-shopping-cart:
          requires:
            - checks
            - publish-local
      - sample-java-replicatedentity-shopping-cart:
          requires:
            - checks
            - publish-local
      - sample-java-eventsourced-counter:
          requires:
            - checks
            - publish-local
      - sample-java-valueentity-counter:
          requires:
            - checks
            - publish-local
      - sample-java-valueentity-counter-spring-client:
          requires:
            - checks
            - publish-local
      - sample-java-replicatedentity-examples:
          requires:
            - checks
            - publish-local
      - sample-scala-doc-snippets:
          requires:
            - checks
            - publish-local
      - sample-scala-fibonacci-action:
          requires:
            - checks
            - publish-local
      - sample-scala-valueentity-customer-registry:
          requires:
            - checks
            - publish-local
      - sample-scala-eventsourced-customer-registry:
          requires:
            - checks
            - publish-local
      - sample-scala-eventsourced-shopping-cart:
          requires:
            - checks
            - publish-local
      - sample-scala-valueentity-counter:
          requires:
            - checks
            - publish-local
      - sample-scala-replicatedentity-examples:
          requires:
            - checks
            - publish-local
      - sample-scala-replicatedentity-shopping-cart:
          requires:
            - checks
            - publish-local
      - sample-scala-valueentity-shopping-cart:
          requires:
            - checks
            - publish-local
      - sample-scala-customer-registry-quickstart:
          requires:
            - checks
            - publish-local
      - sample-scala-first-service:
          requires:
            - checks
            - publish-local
      - publish:
          filters: # version tags only
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - publish-maven:
          filters: # version tags only
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - publish

      - publish-tck:
          filters: # version tags only
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - publish

      - publish-docs:
          filters: # version tags only
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            # we only publish the docs if all publishing jobs are successful, otherwise we have a 'broken' release
            - publish
            - publish-maven
            - publish-tck
