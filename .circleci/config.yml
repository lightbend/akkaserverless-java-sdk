version: 2.1

orbs:
  build-tools: circleci/build-tools@2.9.0
  github-cli: circleci/github-cli@1.0.2

commands:
  checkout-and-merge-to-main:
    steps:
      - checkout
      - run:
          name: Configure git user
          command: |
            # required by merge-with-parent (for some unknown reason)
            git config user.email "circleci@example.com"
            git config user.name "CircleCI"
      - build-tools/merge-with-parent:
          parent: main

  install-java:
    description: install openjdk-17
    steps:
      - run:
          name: Install java 17
          command: |
            wget https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_x64_linux_hotspot_17.0.4.1_1.tar.gz -O /tmp/openjdk-17.tar.gz

            sudo mkdir -p /usr/lib/jvm
            sudo tar xfvz /tmp/openjdk-17.tar.gz --directory /usr/lib/jvm
            rm -f /tmp/openjdk-17.tar.gz

            sudo sh -c 'for bin in /usr/lib/jvm/jdk-17.0.4.1+1/bin/*; do update-alternatives --install /usr/bin/$(basename $bin) $(basename $bin) $bin 100; done'
            sudo sh -c 'for bin in /usr/lib/jvm/jdk-17.0.4.1+1/bin/*; do update-alternatives --set $(basename $bin) $bin; done'

  setup_sbt:
    description: "Set up sbt"
    parameters:
      version:
        type: string
        default: "1.8.2"
    steps:
      - install-java
      - run:
          name: Install sbt
          command: |
            curl -L -o sbt-<< parameters.version >>.deb https://repo.scala-sbt.org/scalasbt/debian/sbt-<< parameters.version >>.deb
            sudo dpkg -i sbt-<< parameters.version >>.deb
            rm sbt-<< parameters.version >>.deb
      - restore_cache:
          # https://circleci.com/docs/caching#restoring-cache
          keys:
            # new cache if sbt version changed
            - sbt-cache-v3-{{ checksum "project/build.properties" }}-

  save_deps_cache:
    description: "Save sbt caches"
    steps:
      - save_cache:
          key: sbt-cache-v3-{{ checksum "project/build.properties" }}-
          paths:
            - "~/.sbt"
      - save_cache:
          key: sbt-dependencies-v1-{{ checksum "project/Dependencies.scala" }}-
          paths:
            - "~/.ivy2/cache"
            - "~/.cache/coursier"

  restore_deps_cache:
    description: "Restore sbt dependency cache"
    steps:
      - restore_cache:
          key: sbt-dependencies-v1-{{ checksum "project/Dependencies.scala" }}-

  set-sdk-version:
    description: "Set global option, grab current SDK version"
    steps:
      - run:
          name: "Set SDK version and global options"
          command: |
            echo "export VERSION_CHECK_ON_STARTUP=false" >> $BASH_ENV
            if [ -e workspace/published-version ]; then
              echo "Extracting version from previous publish step"
              echo 'export SDK_VERSION='`cat workspace/published-version` >> $BASH_ENV
            else
              # tail 2 + head 1 because CircleCI adds an extra line
              # the SDK_VERSION is later used to run the maven tests (see below)
              echo "Extracting version from sbt build"
              echo 'export SDK_VERSION='`sbt "print javaSdkProtobuf/version" | tail -n 2 | head -n 1` >> $BASH_ENV
            fi

jobs:
  checks:
    description: "Checks"
    steps:
      - run:
          command: echo "Dummy check as PR validation moved to the GH workflow"

  create-pr-sdk-versions-update:
    docker:
      - image: circleci/openjdk:11
    steps:
      - github-cli/setup
      - checkout
      - restore_deps_cache
      - setup_sbt
      - set-sdk-version
      - run:
          name: Create PR to update all sdk versions (samples, sbt and maven)
          command: |
            echo "Updating samples to version $SDK_VERSION"
            ./updateSdkVersions.sh all
            
            BRANCH=bump-sdk-versions-$SDK_VERSION
            git checkout -b $BRANCH
            git config user.name "Kalix Bot"
            git config user.email "kalix.github@lightbend.com"
            git commit . -m "chore: bump SDK versions to $SDK_VERSION"
            git remote add origin-rw https://$GITHUB_TOKEN@github.com/lightbend/kalix-jvm-sdk
            git push --set-upstream origin-rw $BRANCH
            
            gh pr create -B main -t "Auto PR - Bump SDK versions to $SDK_VERSION" -b "This PR should update all existing samples (pom.xml and plugins.sbt) and the maven-java poms. Please review, and merge if okay. [$CIRCLE_SHA1]($CIRCLE_BUILD_URL)" || echo "No changes"; exit 0

  publish:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - setup_sbt
      - restore_deps_cache
      - run: sbt ci-release
      - save_deps_cache

  publish-maven:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - restore_deps_cache
      - setup_sbt
      - set-sdk-version
      - run:
          name: publish m2
          command: sbt publishM2
      - run:
          name: Publish maven plugin and archetype
          command: |
            cd maven-java
            echo $PGP_SECRET | base64 -d | gpg --import --batch
            mkdir -p ~/.m2
            cat >~/.m2/settings.xml \<<EOF;
            <settings xmlns="http://maven.apache.org/SETTINGS/1.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd">
            <servers>
              <server>
                <id>ossrh</id>
                <username>$SONATYPE_USERNAME</username>
                <password>$SONATYPE_PASSWORD</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>ossrh</id>
                <activation>
                  <activeByDefault>true</activeByDefault>
                </activation>
                <properties>
                  <gpg.passphrase>$PGP_PASSPHRASE</gpg.passphrase>
                </properties>
              </profile>
            </profiles>
            </settings>
            EOF
            mvn -B versions:set -DnewVersion=$SDK_VERSION
            mvn -P release -B deploy

  publish-tck:
    docker:
      - image: circleci/openjdk:11
    steps:
      - checkout
      - setup_remote_docker
      - setup_sbt
      - restore_deps_cache
      - run: bin/docker-login-public-gcr.sh
      - run: sbt javaTck/Docker/publish
      - run: sbt scalaTck/Docker/publish
      - save_deps_cache

  publish-docs:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - setup_sbt
      - restore_deps_cache
      # deploy key for pushing docs to branch
      - add_ssh_keys:
          fingerprints:
            - "92:20:53:ff:db:d1:3f:f3:79:85:53:b5:9e:4b:b4:b4"
      - run:
          name: Publish docs
          command: make -C docs deploy
      - save_deps_cache

workflows:
  CI:
    jobs:
      - checks

      - publish:
          filters: # version tags only
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - publish-maven:
          filters: # version tags only
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - publish

      - publish-tck:
          filters: # version tags only
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - publish

      - publish-docs:
          filters: # version tags only (but no snapshots/milestones)
            tags:
              only: /^v\d+(\.\d+){1,2}$/
            branches:
              ignore: /.*/
          requires:
            # we only publish the docs if all publishing jobs are successful, otherwise we have a 'broken' release
            - publish
            - publish-maven
            - publish-tck

      - create-pr-sdk-versions-update:
          filters: # version tags only (but no snapshots/milestones)
            tags:
              only: /^v\d+(\.\d+){1,2}$/
            branches:
              ignore: /.*/
          requires:
            # we only create the versions bump PR after publish-docs is successful, which means release was successful
            - publish-docs
