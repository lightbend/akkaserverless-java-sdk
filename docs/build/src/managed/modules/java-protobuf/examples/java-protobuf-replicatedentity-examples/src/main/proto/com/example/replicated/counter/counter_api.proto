// Copyright 2021 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/empty.proto";
import "kalix/annotations.proto";

package com.example.replicated.counter;

option java_outer_classname = "SomeCounterApi";

message IncreaseValue {
  string counter_id = 1 [(kalix.field).entity_key = true];
  int32 value = 2;
}

message DecreaseValue {
  string counter_id = 1 [(kalix.field).entity_key = true];
  int32 value = 2;
}

message GetValue {
  string counter_id = 1 [(kalix.field).entity_key = true];
}

message CurrentValue {
  int64 value = 1;
}

// tag::replicated_entity[]
service CounterService {
  option (kalix.codegen) = {
    replicated_entity: {
      name: "com.example.replicated.counter.domain.SomeCounter" // <1>
      entity_type: "some-counter"
      replicated_counter: {} // <2>
    }
  };

  rpc Increase(IncreaseValue) returns (google.protobuf.Empty);
  rpc Decrease(DecreaseValue) returns (google.protobuf.Empty);
  rpc Get(GetValue) returns (CurrentValue);
}
// end::replicated_entity[]
