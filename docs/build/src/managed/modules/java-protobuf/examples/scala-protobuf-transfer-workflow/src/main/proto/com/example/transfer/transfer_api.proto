// This is the public API offered by your workflow.
// tag::transfer-workflow[]
syntax = "proto3";

package com.example.transfer.api; // <1>

import "google/protobuf/empty.proto"; // <2>
import "kalix/annotations.proto";
import "com/example/transfer/transfer_domain.proto";

message Transfer { // <3>
    string transfer_id = 1 [(kalix.field).id = true]; // <4>
    string from = 2;
    string to = 3;
    int32 amount = 4;
}

message GetRequest{
    string transfer_id = 1 [(kalix.field).id = true];
}

service TransferWorkflowService { // <5>
    option (kalix.codegen) = { // <6>
        workflow: { // <7>
            name: "com.example.transfer.api.TransferWorkflow" // <8>
            type_id: "transfer" // <9>
            state: "com.example.transfer.domain.TransferState" // <10>
        }
    };
    rpc Start(Transfer) returns (google.protobuf.Empty) {}
    rpc GetTransferState(GetRequest) returns (com.example.transfer.domain.TransferState) {}
}
// end::transfer-workflow[]