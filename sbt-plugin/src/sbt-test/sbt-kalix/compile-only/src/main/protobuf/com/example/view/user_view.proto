// Copyright (C) 2021-2024 Lightbend Inc. <https://www.lightbend.com>

syntax = "proto3";

package com.example.view;

option java_outer_classname = "UserViewModel";

import "google/protobuf/empty.proto";
import "com/example/valueentity/domain/user_domain.proto";
import "kalix/annotations.proto";

service UserByName {
  option (kalix.codegen) = {
    view: { }
  };

  // purposely using a projection query up top to detect using the wrong state type
  rpc GetCustomersProjected(ByNameRequest) returns (stream UserProjection) {
    option (kalix.method).view.query = {
      query: "SELECT name  FROM users WHERE name = :name"
    };
  }

  rpc UpdateCustomer(valueentity.domain.UserState) returns (valueentity.domain.UserState) {
    option (kalix.method).eventing.in = {
      value_entity: "users"
    };
    option (kalix.method).view.update = {
      table: "users"
      transform_updates: true
    };
  }

  rpc DeleteCustomer(google.protobuf.Empty) returns (valueentity.domain.UserState) {
    option (kalix.method).eventing.in = {
      value_entity: "users"
      handle_deletes: true
    };
    option (kalix.method).view.update = {
      table: "users"
      transform_updates: true
    };
  }

  rpc GetCustomers(ByNameRequest) returns (stream valueentity.domain.UserState) {
    option (kalix.method).view.query = {
      query: "SELECT * FROM users WHERE name = :name"
    };
  }
}

message ByNameRequest {
  string user_name = 1;
}

message UserProjection {
  string name = 1;
}

// test coverage for a view with no transformations
service AdditionalView {
  option (kalix.codegen) = {
    view: {}
  };

  rpc UpdateCustomer(valueentity.domain.UserState) returns (valueentity.domain.UserState) {
    option (kalix.method).eventing.in = {
      value_entity: "users_no_transform"
    };
    option (kalix.method).view.update = {
      table: "users_no_transform"
    };
  }
}
