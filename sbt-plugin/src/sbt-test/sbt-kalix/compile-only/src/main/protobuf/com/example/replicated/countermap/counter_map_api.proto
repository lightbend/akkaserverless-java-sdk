// Copyright 2024 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/empty.proto";
import "kalix/annotations.proto";

package com.example.replicated.countermap;

option java_outer_classname = "SomeCounterMapApi";

message IncreaseValue {
  string counter_map_id = 1 [(kalix.field).id = true];
  string key = 2;
  int32 value = 3;
}

message DecreaseValue {
  string counter_map_id = 1 [(kalix.field).id = true];
  string key = 2;
  int32 value = 3;
}

message GetValue {
  string counter_map_id = 1 [(kalix.field).id = true];
  string key = 2;
}

message CurrentValue {
  int32 value = 1;
}

message GetAllValues {
  string counter_map_id = 1 [(kalix.field).id = true];
}

message CurrentValues {
  map<string, int32> values = 1;
}

service CounterMapService {
  option (kalix.codegen) = {
    replicated_entity: {
      name: ".domain.SomeCounterMap"
      type_id: "some-counter-map"
      replicated_counter_map: {
        key: ".domain.SomeKey"
      }
    }
  };

  rpc Increase(IncreaseValue) returns (google.protobuf.Empty);
  rpc Decrease(DecreaseValue) returns (google.protobuf.Empty);
  rpc Get(GetValue) returns (CurrentValue);
  rpc GetAll(GetAllValues) returns (CurrentValues);
}

service ScalarCounterMapService {
  option (kalix.codegen) = {
    replicated_entity: {
      name: ".domain.SomeScalarCounterMap"
      type_id: "some-scalar-counter-map"
      replicated_counter_map: {
        key: "int64"
      }
    }
  };


  rpc Increase(IncreaseValue) returns (google.protobuf.Empty);
  rpc Decrease(DecreaseValue) returns (google.protobuf.Empty);
  rpc Get(GetValue) returns (CurrentValue);
  rpc GetAll(GetAllValues) returns (CurrentValues);
}
