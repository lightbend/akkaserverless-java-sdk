// Copyright (C) 2021-2024 Lightbend Inc. <https://www.lightbend.com>

syntax = "proto3";

import "google/protobuf/empty.proto";
import "kalix/annotations.proto";

package com.example.replicated.countermap;

option java_outer_classname = "SomeCounterMapApi";

message IncreaseValue {
  string counter_map_id = 1 [(kalix.field).id = true];
  string key = 2;
  int32 value = 3;
}

message DecreaseValue {
  string counter_map_id = 1 [(kalix.field).id = true];
  string key = 2;
  int32 value = 3;
}

message GetValue {
  string counter_map_id = 1 [(kalix.field).id = true];
  string key = 2;
}

message CurrentValue {
  int32 value = 1;
}

message GetAllValues {
  string counter_map_id = 1 [(kalix.field).id = true];
}

message CurrentValues {
  map<string, int32> values = 1;
}

service CounterMapService {
  option (kalix.codegen) = {
    replicated_entity: {
      name: ".domain.SomeCounterMap"
      type_id: "some-counter-map"
      replicated_counter_map: {
        key: ".domain.SomeKey"
      }
    }
  };

  rpc Increase(IncreaseValue) returns (google.protobuf.Empty);
  rpc Decrease(DecreaseValue) returns (google.protobuf.Empty);
  rpc Get(GetValue) returns (CurrentValue);
  rpc GetAll(GetAllValues) returns (CurrentValues);
}

service ScalarCounterMapService {
  option (kalix.codegen) = {
    replicated_entity: {
      name: ".domain.SomeScalarCounterMap"
      type_id: "some-scalar-counter-map"
      replicated_counter_map: {
        key: "int64"
      }
    }
  };


  rpc Increase(IncreaseValue) returns (google.protobuf.Empty);
  rpc Decrease(DecreaseValue) returns (google.protobuf.Empty);
  rpc Get(GetValue) returns (CurrentValue);
  rpc GetAll(GetAllValues) returns (CurrentValues);
}
